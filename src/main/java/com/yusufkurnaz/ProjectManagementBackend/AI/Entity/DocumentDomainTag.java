package com.yusufkurnaz.ProjectManagementBackend.AI.Entity;

import com.yusufkurnaz.ProjectManagementBackend.Common.Model.BaseEntity;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;

import java.util.UUID;

/**
 * Entity for document domain tags
 * Enables domain-specific document categorization and discovery
 */
@Entity
@Table(name = "document_domain_tags", 
       uniqueConstraints = @UniqueConstraint(columnNames = {"document_id", "tag"}))
@Data
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
@EqualsAndHashCode(callSuper = true)
public class DocumentDomainTag extends BaseEntity {

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "document_id", nullable = false)
    private Document document;

    @Column(name = "tag", nullable = false, length = 50)
    private String tag; // e.g., "sağlık", "yazılım", "finans", "eğitim"

    @Column(name = "confidence_score")
    private Float confidenceScore; // AI-generated tag confidence (0.0 to 1.0)

    @Column(name = "tagged_by")
    private UUID taggedBy; // User who added the tag (null if AI-generated)

    @Enumerated(EnumType.STRING)
    @Column(name = "tag_source", nullable = false)
    @Builder.Default
    private TagSource tagSource = TagSource.USER;

    @Column(name = "description", length = 200)
    private String description; // Optional description for the tag

    public enum TagSource {
        USER,           // Manually added by user
        AI_GENERATED,   // Generated by AI from content analysis
        AUTO_DETECTED   // Auto-detected from content patterns
    }

    // Helper methods
    public boolean isUserGenerated() {
        return TagSource.USER.equals(this.tagSource);
    }

    public boolean isAiGenerated() {
        return TagSource.AI_GENERATED.equals(this.tagSource) || 
               TagSource.AUTO_DETECTED.equals(this.tagSource);
    }

    public boolean isHighConfidence() {
        return this.confidenceScore != null && this.confidenceScore >= 0.8f;
    }
}
